import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

TOKEN = os.getenv("BOT_TOKEN")

inventory = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Å–∫–ª–∞–¥-–±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /add, /take, /list.")

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add —Ç–æ–≤–∞—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return
    item = context.args[0]
    qty = int(context.args[1])
    inventory[item] = inventory.get(item, 0) + qty
    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {item} ({inventory[item]})")

async def take(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /take —Ç–æ–≤–∞—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return
    item = context.args[0]
    qty = int(context.args[1])
    if item in inventory:
        inventory[item] = max(0, inventory[item] - qty)
        await update.message.reply_text(f"‚úÇÔ∏è –ó–∞–±—Ä–∞–Ω–æ: {item} ({inventory[item]})")
    else:
        await update.message.reply_text("‚ùå –¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ")

async def list_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not inventory:
        await update.message.reply_text("–°–∫–ª–∞–¥ –ø—É—Å—Ç")
        return
    text = "\n".join([f"{k}: {v}" for k,v in inventory.items()])
    await update.message.reply_text("üì¶ –û—Å—Ç–∞—Ç–∫–∏:\n" + text)

app = Application.builder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("add", add))
app.add_handler(CommandHandler("take", take))
app.add_handler(CommandHandler("list", list_items))

if __name__ == "__main__":
    app.run_polling()
